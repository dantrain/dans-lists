// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model List {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title String @db.Text
    rank  String

    repeatsMon Boolean @default(true)
    repeatsTue Boolean @default(true)
    repeatsWed Boolean @default(true)
    repeatsThu Boolean @default(true)
    repeatsFri Boolean @default(true)
    repeatsSat Boolean @default(true)
    repeatsSun Boolean @default(true)

    startMinutes Int?
    endMinutes   Int?

    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String

    items Item[]

    @@index([ownerId])
    @@index([rank])
}

model Item {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title String @db.Text
    rank  String

    list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String

    events Event[]

    @@index([listId])
    @@index([rank])
}

model Event {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    streak Int @default(0)

    item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId   String
    status   Status @relation(fields: [statusId], references: [id])
    statusId String

    @@index([itemId])
    @@index([statusId])
}

model Status {
    id   String @id @default(cuid())
    name String @unique

    events Event[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    lists         List[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
